<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.jhta_2402_2_final.exception.dao.distribution.DistributionDao">


    <select id="getChartData" resultType="wareHouseChartDto" parameterType="wareHouseChartDto">

        SELECT
            sph.SOURCE_PRICE_ID,
            sph.NEW_PRICE as price,
            s.NAME AS sourceName,
            c.NAME AS companyName,
            sph.CHANGE_DATE as date
        FROM
            SOURCE_PRICE_HISTORY sph
                JOIN
            SOURCE_PRICE sp ON sph.SOURCE_PRICE_ID = sp.SOURCE_PRICE_ID
                JOIN
            SOURCE s ON sp.SOURCE_ID = s.SOURCE_ID
                JOIN
            PRODUCT_COMPANY c ON sp.PRODUCT_COMPANY_ID = c.PRODUCT_COMPANY_ID
        WHERE
            c.NAME = #{companyName}
          AND s.NAME = #{sourceName}
          AND sph.CHANGE_DATE BETWEEN #{startDate} AND #{endDate}
        ORDER BY
            sph.CHANGE_DATE
    </select>




    <select id="getSource" resultType="map" >
        select NAME from SOURCE
    </select>

    <select id="getCompanyName" resultType="map">
        select NAME from PRODUCT_COMPANY
    </select>


    <!-- FIFO 순서로 해당 SOURCE의 스택을 가져오는 쿼리 -->
    <select id="selectStacksBySourceFIFO" parameterType="String" resultType="LogisticsWareHouseDto">
        SELECT LOGISTICS_WAREHOUSE_STACK_ID as logisticsWareHouseUUID,
               QUANTITY                     as quantity
        FROM LOGISTICS_WAREHOUSE_STACK
        WHERE SOURCE_ID = (SELECT SOURCE_ID FROM SOURCE WHERE NAME = #{sourceName})
        ORDER BY created_at ASC, LOGISTICS_WAREHOUSE_STACK_ID ASC
    </select>

    <update id="updateStackQuantityFIFO" parameterType="map">
        UPDATE LOGISTICS_WAREHOUSE_STACK
        SET QUANTITY = QUANTITY - #{deduction}
        WHERE LOGISTICS_WAREHOUSE_STACK_ID = #{stackId}
    </update>



    <select id="selectAllLogisticsWarehouse" resultType="LogisticsWareHouseDto">

        SELECT lw.WAREHOUSE_NAME AS wareHouseName,
               s.NAME            AS sourceName,
               s.SOURCE_ID       AS sourceUUID,
               SUM(lws.QUANTITY) AS quantity
        FROM LOGISTICS_WAREHOUSE lw
                 JOIN LOGISTICS_WAREHOUSE_STACK lws ON lw.LOGISTICS_WAREHOUSE_ID = lws.LOGISTICS_WAREHOUSE_ID
                 JOIN SOURCE s ON lws.SOURCE_ID = s.SOURCE_ID

        GROUP BY lw.WAREHOUSE_NAME,
                 s.NAME

        ORDER BY lw.WAREHOUSE_NAME,
                 s.NAME
    </select>

    <select id="selectBySourceNameLogisticsWarehouse" parameterType="String" resultType="LogisticsWareHouseDto">
        SELECT lw.WAREHOUSE_NAME AS wareHouseName,
               s.NAME            AS sourceName,
               s.SOURCE_ID       AS sourceUUID,
               SUM(lws.QUANTITY) AS quantity
        FROM LOGISTICS_WAREHOUSE lw
                 JOIN LOGISTICS_WAREHOUSE_STACK lws ON lw.LOGISTICS_WAREHOUSE_ID = lws.LOGISTICS_WAREHOUSE_ID
                 JOIN SOURCE s ON lws.SOURCE_ID = s.SOURCE_ID
        WHERE s.NAME = #{sourceName}
        GROUP BY lw.WAREHOUSE_NAME, s.NAME, s.SOURCE_ID
    </select>


    <!-- 쿼리 정의 -->
    <select id="selectProductOrderLogs" resultType="LogisticsWareHouseDetailDto">
        SELECT POL.PRODUCT_ORDER_LOG_ID as logPk,
               POL.PRODUCT_ORDER_DATE   AS logDate,
               PO.QUANTITY              AS quantity,
               S.NAME                   AS sourceName,
               S.SOURCE_ID              AS sourcePk,
               PC.NAME                  AS productCompany
        FROM PRODUCT_ORDER_LOG POL
                 JOIN
             PRODUCT_ORDER PO ON POL.PRODUCT_ORDER_ID = PO.PRODUCT_ORDER_ID
                 JOIN
             KIT_SOURCE KS ON PO.SOURCE_PRICE_ID = KS.KIT_SOURCE_ID
                 JOIN
             SOURCE S ON KS.SOURCE_ID = S.SOURCE_ID
                 JOIN
             SOURCE_PRICE SP ON S.SOURCE_ID = SP.SOURCE_ID
                 JOIN
             PRODUCT_COMPANY PC ON SP.PRODUCT_COMPANY_ID = PC.PRODUCT_COMPANY_ID
        WHERE POL.STATUS_ID = 3
    </select>


    <update id="updateProductOrderStatus" >
        UPDATE PRODUCT_ORDER
        SET STATUS_ID = 7
        WHERE STATUS_ID = 5
    </update>

    <select id="selectProductOrderIdByStatus" resultType="String" parameterType="int">
        select PRODUCT_ORDER_ID
        from PRODUCT_ORDER
        where STATUS_ID = #{status}
    </select>


    <insert id="insertProductOrderLog" parameterType="list">
        INSERT INTO PRODUCT_ORDER_LOG (PRODUCT_ORDER_LOG_ID, PRODUCT_ORDER_ID, STATUS_ID, PRODUCT_ORDER_DATE)
        VALUES
        <foreach collection="list" item="productOrderId" separator=",">
            (UUID(), #{productOrderId}, 7, NOW())
        </foreach>
    </insert>

    <update id="updateKitOrderStatus" parameterType="int">
        UPDATE KIT_ORDER
        SET STATUS_ID = 8
        WHERE STATUS_ID = 6
    </update>

    <select id="selectKitOrderIdByStatus" resultType="String" parameterType="int">
            select  KIT_ORDER_ID from KIT_ORDER where STATUS_ID =#{status}
    </select>

    <insert id="insertKitOrderLog" parameterType="list">
        INSERT INTO KIT_ORDER_LOG (KIT_ORDER_LOG_ID, KIT_ORDER_ID, STATUS_ID, PRODUCT_ORDER_DATE)
        VALUES
        <foreach collection="list" item="kitOrderId" separator=",">
            (UUID(), #{kitOrderId}, 8, NOW())
        </foreach>
    </insert>


    <insert id="insertWarehouseStackForCompletedOrders">
        INSERT INTO LOGISTICS_WAREHOUSE_STACK (LOGISTICS_WAREHOUSE_STACK_ID, SOURCE_ID, LOGISTICS_WAREHOUSE_ID, QUANTITY,created_at)
        SELECT UUID() AS LOGISTICS_WAREHOUSE_STACK_ID,
               S.SOURCE_ID AS SOURCE_ID,
               LW.LOGISTICS_WAREHOUSE_ID AS LOGISTICS_WAREHOUSE_ID,
               SUM(PO.QUANTITY * KS.QUANTITY) AS QUANTITY,
               now()
        FROM PRODUCT_ORDER PO
                 JOIN KIT_SOURCE KS ON PO.SOURCE_ID = KS.SOURCE_ID
                 JOIN SOURCE S ON KS.SOURCE_ID = S.SOURCE_ID
                 JOIN LOGISTICS_WAREHOUSE LW ON LW.WAREHOUSE_NAME = '중앙 물류 창고'
        WHERE PO.STATUS_ID = 5
        GROUP BY S.SOURCE_ID, LW.LOGISTICS_WAREHOUSE_ID

    </insert>




    <!--  <select id="selectRequiredStack" resultType="map">
          SELECT
              S.SOURCE_ID AS sourceFk,
              S.NAME AS sourceName,
              SUM(KO.QUANTITY * KS.QUANTITY) AS totalQuantity
          FROM
              KIT_ORDER KO
                  JOIN
              MEALKIT MK ON KO.MEALKIT_ID = MK.MEALKIT_ID
                  JOIN
              KIT_SOURCE KS ON MK.MEALKIT_ID = KS.MEALKIT_ID
                  JOIN
              SOURCE S ON KS.SOURCE_ID = S.SOURCE_ID
          WHERE
              KO.STATUS_ID = 1
          GROUP BY
              S.SOURCE_ID, S.NAME
      </select>
      -->


    <select id="selectRequiredStack" resultType="map">
        SELECT S.SOURCE_ID                    AS sourceFk,
               S.NAME                         AS sourceName,
               SUM(KO.QUANTITY * KS.QUANTITY) AS totalQuantity
        FROM KIT_ORDER KO
                 JOIN
             MEALKIT MK ON KO.MEALKIT_ID = MK.MEALKIT_ID
                 JOIN
             KIT_SOURCE KS ON MK.MEALKIT_ID = KS.MEALKIT_ID
                 JOIN
             SOURCE S ON KS.SOURCE_ID = S.SOURCE_ID
        WHERE KO.STATUS_ID = 6
        GROUP BY S.SOURCE_ID, S.NAME
    </select>


    <update id="updateStack" parameterType="map">
        UPDATE LOGISTICS_WAREHOUSE_STACK
        SET QUANTITY = QUANTITY - #{quantity}
        WHERE SOURCE_ID = #{sourceFk}
    </update>

    <update id="updateStackBySourceName" parameterType="map">
        UPDATE LOGISTICS_WAREHOUSE_STACK
        SET QUANTITY = QUANTITY - #{quantity}
        WHERE SOURCE_ID = (SELECT SOURCE_ID FROM SOURCE WHERE NAME = #{sourceName}
    </update>






    <update id="updateStackFirstRecord">
        UPDATE LOGISTICS_WAREHOUSE_STACK
        SET QUANTITY = QUANTITY - #{quantity}
        WHERE SOURCE_ID = #{sourceFk}
          AND LOGISTICS_WAREHOUSE_STACK_ID = (SELECT MIN(LOGISTICS_WAREHOUSE_STACK_ID)
                                              FROM LOGISTICS_WAREHOUSE_STACK
                                              WHERE SOURCE_ID = #{sourceFk} )
    </update>


    <delete id="deleteZeroQuantityRecords">
        DELETE
        FROM LOGISTICS_WAREHOUSE_STACK
        WHERE QUANTITY <![CDATA[<=]]> 0
    </delete>

    <select id="selectKitOrderLogDetailsBySourceId" parameterType="String" resultType="org.example.jhta_2402_2_final.model.dto.distribution.KitOrderDetailLogDto">

        SELECT
            KOL.KIT_ORDER_ID AS kitOrderId,
            MK.NAME AS mealkitName,
            S.NAME AS sourceName,
            S.SOURCE_ID AS sourceId,
            (KO.QUANTITY * KS.QUANTITY) AS quantity,
            KOL.PRODUCT_ORDER_DATE AS orderDate,
            KC.NAME AS CompanyName,  -- KIT_COMPANY의 회사명 추가
            CASE
                WHEN KOL.STATUS_ID = 8 THEN '출고'
                ELSE '다른 상태'
                END AS status
        FROM
            KIT_ORDER_LOG KOL
                JOIN KIT_ORDER KO ON KOL.KIT_ORDER_ID = KO.KIT_ORDER_ID
                JOIN MEALKIT MK ON KO.MEALKIT_ID = MK.MEALKIT_ID
                JOIN KIT_SOURCE KS ON MK.MEALKIT_ID = KS.MEALKIT_ID
                JOIN SOURCE S ON KS.SOURCE_ID = S.SOURCE_ID
                JOIN KIT_COMPANY KC ON KO.KIT_COMPANY_ID = KC.KIT_COMPANY_ID  -- KIT_COMPANY 테이블 조인
        WHERE
            KOL.STATUS_ID = 8
          AND S.SOURCE_ID = #{sourceId}

    </select>

    <select id="selectProductOrderLogDetailsBySourceId" parameterType="String" resultType="org.example.jhta_2402_2_final.model.dto.distribution.ProductOrderLogDto">
        SELECT
            pol.PRODUCT_ORDER_ID AS productOrderId,
            s.NAME AS sourceName,
            s.SOURCE_ID AS sourceId,
            po.QUANTITY AS quantity,
            po.PRODUCT_COMPANY_ID AS productCompanyId,  -- PRODUCT_COMPANY_ID를 PRODUCT_ORDER에서 가져옴
            pc.NAME AS companyName,
            pol.PRODUCT_ORDER_DATE AS orderDate,
            CASE
                WHEN pol.STATUS_ID = 7 THEN '입고'
                ELSE '다른 상태'
                END AS status
        FROM
            PRODUCT_ORDER_LOG pol
                JOIN PRODUCT_ORDER po ON pol.PRODUCT_ORDER_ID = po.PRODUCT_ORDER_ID
                JOIN KIT_SOURCE ks ON po.SOURCE_ID = ks.SOURCE_ID
                JOIN SOURCE s ON ks.SOURCE_ID = s.SOURCE_ID
                JOIN PRODUCT_COMPANY pc ON po.PRODUCT_COMPANY_ID = pc.PRODUCT_COMPANY_ID  -- PRODUCT_COMPANY_ID를 PRODUCT_ORDER에서 가져옴
        WHERE
            pol.STATUS_ID = 7
          AND s.SOURCE_ID = #{sourceId}

    </select>

    <insert id="insertProductOrder" parameterType="map">
        INSERT INTO PRODUCT_ORDER VALUES (
                                             UUID(),
                                             (SELECT PRODUCT_COMPANY_ID FROM PRODUCT_COMPANY WHERE NAME = #{companyName}),
                                             (SELECT SOURCE_ID FROM SOURCE WHERE NAME = #{sourceName}),
                                             NULL, -- KIT_ORDER_ID를 NULL로 설정
                                             #{quantity},
                                             #{price},
                                             NOW(),
                                             1
                                         )
    </insert>

</mapper>

