<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.jhta_2402_2_final.dao.product.ProductCompanyDao">
    <!-- 유저 인증 -->
    <select id="getUserUidByUserId" parameterType="String" resultType="String">
        select user_pk as userUid from USER where USER_ID = #{userId}
    </select>
    <select id="getCompanyIdByUserUid" parameterType="String" resultType="String">
        select PRODUCT_COMPANY_ID as companyId from PRODUCT_COMPANY_MEMBER where USER_ID = #{userUid}
    </select>

    <!-- 생산 업체의 현재 생산품 리스트 가져옴 -->
    <select id="getSourcesByCompanyName" resultType="CompanySourceDto" parameterType="String">
        select
            sp.SOURCE_PRICE_ID as 'companySourceId',
                s.NAME as 'sourceName',
                PRICE as 'sourcePrice',
                COALESCE((SELECT SUM(quantity)
                          FROM SOURCE_WAREHOUSE sw
                          WHERE sw.SOURCE_PRICE_ID = sp.SOURCE_PRICE_ID), 0) AS totalQuantity
        from SOURCE_PRICE sp
                 join SOURCE s ON s.source_id = sp.source_id
                 join PRODUCT_COMPANY pc ON pc.product_company_id = sp.product_company_id
        where pc.PRODUCT_COMPANY_ID = #{companyId}
    </select>

    <!-- 생산업체 생산품 등록 Create, Update, Delete -->
    <insert id="addSourceToCompany" parameterType="AddSourceDto">
        INSERT INTO
            SOURCE_PRICE (SOURCE_PRICE_ID, PRODUCT_COMPANY_ID, SOURCE_ID, PRICE)
        VALUES
            (UUID(), #{companyId}, #{sourceId}, #{sourcePrice})
    </insert>
    <update id="sourcePriceUpdate" parameterType="SourcePriceUpdateDto">
        UPDATE SOURCE_PRICE SET price = #{sourcePrice} WHERE source_price_id = #{companySourceId}
    </update>
    <insert id="sourcePriceHistory" parameterType="SourcePriceUpdateDto">
        INSERT INTO
            SOURCE_PRICE_HISTORY (SOURCE_PRICE_HISTORY_ID, SOURCE_PRICE_ID, OLD_PRICE, NEW_PRICE, CHANGE_DATE)
        VALUES
            (UUID(), #{companySourceId}, #{oldPrice}, #{sourcePrice}, NOW())
    </insert>
    <delete id="deleteSourceFromCompany" parameterType="Map">
        DELETE FROM SOURCE_PRICE WHERE SOURCE_PRICE_ID = #{companySourceId}
    </delete>

    <!-- 생산품 실제 생산 -->
    <insert id="produceSource" parameterType="map">
        INSERT into SOURCE_WAREHOUSE (SOURCE_WAREHOUSE_ID, QUANTITY, PRODUCE_DATE, SOURCE_PRICE_ID)
        VALUES (UUID(), #{sourceQuantity}, NOW(), #{sourcePriceId})
    </insert>

    <!-- 창고 입출고 리스트 가져옴 -->
    <select id="getWarehouseSources" resultType="ProductCompanyWarehouseDto" parameterType="String">
        SELECT ROW_NUMBER() OVER (order by sw.produce_date asc) AS rowNum,
                sw.source_warehouse_id                   as sourceWarehouseId,
               sw.QUANTITY                              as sourceQuantity,
               DATE_FORMAT(sw.produce_date, '%Y-%m-%d %h:%m') as produceDate,
               s.name                                   as sourceName,
               CASE
                   WHEN sw.QUANTITY > 0 THEN '입고'
                   ELSE '출고'
                   END                                  as type
        FROM SOURCE_WAREHOUSE sw
                 JOIN SOURCE_PRICE sp on sp.SOURCE_PRICE_ID = sw.SOURCE_PRICE_ID
                 JOIN SOURCE s on s.SOURCE_ID = sp.SOURCE_ID
                 JOIN PRODUCT_COMPANY pc ON pc.PRODUCT_COMPANY_ID = sp.PRODUCT_COMPANY_ID
        WHERE pc.PRODUCT_COMPANY_ID = #{companyId}
    </select>

    <!-- 주문 주문 주문 주문 주문 -->
    <select id="getProductOrderList" resultType="ProductCompanyOrderDto" parameterType="ProductCompanySearchOptionDto">
        SELECT
        ROW_NUMBER() OVER (ORDER BY po.PRODUCT_ORDER_DATE asc) AS rowNum,
        po.PRODUCT_ORDER_ID as orderId,
        s.NAME AS sourceName,
        po.PRICE AS sourcePrice,
        po.QUANTITY AS quantity,
        (po.PRICE * po.QUANTITY) AS totalPrice,
        DATE_FORMAT(po.PRODUCT_ORDER_DATE, '%Y-%m-%d %h:%m') AS orderDate,
        st.STATUS AS orderStatus,
        sp.SOURCE_PRICE_ID as sourcePriceId,
        COALESCE(sw.totalQuantity, 0) AS stockBalance
        FROM PRODUCT_ORDER po
        JOIN SOURCE_PRICE sp ON po.SOURCE_ID = sp.SOURCE_ID
        JOIN PRODUCT_COMPANY pc ON pc.PRODUCT_COMPANY_ID = sp.PRODUCT_COMPANY_ID
        JOIN SOURCE s ON sp.SOURCE_ID = s.SOURCE_ID
        JOIN STATUS st ON st.STATUS_ID = po.STATUS_ID
        LEFT JOIN (
        SELECT
        SOURCE_PRICE_ID,
        SUM(QUANTITY) AS totalQuantity
        FROM SOURCE_WAREHOUSE
        GROUP BY SOURCE_PRICE_ID
        ) sw ON sw.SOURCE_PRICE_ID = sp.SOURCE_PRICE_ID
        WHERE pc.PRODUCT_COMPANY_ID = #{companyId}
        <choose>
            <when test="statusId == 1">
                and st.STATUS_ID = 1
            </when>
            <when test="statusId == 2">
                and st.STATUS_ID != 1
            </when>
            <otherwise></otherwise>
        </choose>
        <if test="sourceName != 'all'">
            and s.name = #{sourceName}
        </if>
        GROUP BY po.PRODUCT_ORDER_ID
        order by po.PRODUCT_ORDER_DATE DESC
    </select>

    <update id="orderProcess" parameterType="ProductCompanyOrderProcessDto">
        update PRODUCT_ORDER set STATUS_ID = #{orderStatus} where PRODUCT_ORDER_ID = #{orderId}
    </update>

    <insert id="orderLog" parameterType="ProductCompanyOrderProcessDto">
        insert into PRODUCT_ORDER_LOG (PRODUCT_ORDER_LOG_ID, PRODUCT_ORDER_ID, STATUS_ID, PRODUCT_ORDER_DATE)
        VALUES (UUID(), #{orderId}, #{orderStatus}, NOW())
    </insert>

    <insert id="outboundSource" parameterType="ProductCompanyOrderProcessDto">
        INSERT into SOURCE_WAREHOUSE (SOURCE_WAREHOUSE_ID, QUANTITY, PRODUCE_DATE, SOURCE_PRICE_ID)
        VALUES (UUID(), -#{sourceQuantity}, NOW(), #{sourcePriceId})
    </insert>

    <select id="getOrderStatus" parameterType="String" resultType="int">
        select STATUS_ID FROM PRODUCT_ORDER where PRODUCT_ORDER_ID = #{orderId}
    </select>
    <!-- 주문 끝 -->


    <!-- 모든 재료 리스트 (현재 업체에 등록된 재료 제외) -->
    <select id="getAllSources" resultType="SourceDto" parameterType="String">
        SELECT s.SOURCE_ID as 'sourceId', s.NAME as 'sourceName'
        FROM SOURCE s
        WHERE NOT EXISTS (
            SELECT 1
            FROM SOURCE_PRICE sp
                     JOIN PRODUCT_COMPANY pc ON sp.PRODUCT_COMPANY_ID = pc.PRODUCT_COMPANY_ID
            WHERE sp.SOURCE_ID = s.SOURCE_ID
              AND pc.PRODUCT_COMPANY_ID = #{companyId}
        )
    </select>

    <!-- 입력한 sourceName 값으로 Id 가져오기, 없으면 등록할거임 -->
    <select id="getSourceIdByName" parameterType="String" resultType="String">
        SELECT SOURCE_ID FROM SOURCE WHERE NAME = #{sourceName}
    </select>
    <insert id="addSource" parameterType="map">
        INSERT INTO SOURCE (SOURCE_ID, NAME) VALUES (#{sourceId}, #{sourceName})
    </insert>

    <select id="getSourceQuantityFromWarehouse" parameterType="String" resultType="int">
        select SUM(quantity) from SOURCE_WAREHOUSE WHERE SOURCE_PRICE_ID = #{sourcePriceId}
    </select>

    <select id="checkDuplicateCompanySource" parameterType="AddSourceDto" resultType="boolean">
        SELECT COUNT(*)
        FROM SOURCE_PRICE sp
                 JOIN SOURCE s on sp.SOURCE_ID = s.SOURCE_ID
                 JOIN PRODUCT_COMPANY pc on pc.PRODUCT_COMPANY_ID = sp.PRODUCT_COMPANY_ID
        WHERE pc.PRODUCT_COMPANY_ID = #{companyId} and (s.SOURCE_ID = #{sourceId} or s.NAME = #{sourceName})
    </select>

    <select id="selectAllCompanySource" parameterType="String" resultType="String">
        SELECT s.NAME as sourceName
        FROM SOURCE_PRICE sp
                 JOIN PRODUCT_COMPANY pc on sp.PRODUCT_COMPANY_ID = pc.PRODUCT_COMPANY_ID
                 JOIN SOURCE s on sp.SOURCE_ID = s.SOURCE_ID
        where pc.PRODUCT_COMPANY_ID = #{companyId}
    </select>

    <!-- Chart 차트 -->
    <select id="getChart" resultType="ProductCompanyChartDto" parameterType="String">
        SELECT
            SUM(quantity) as sourceQuantity,
            s.NAME as sourceName
        FROM SOURCE_WAREHOUSE sw
                 join SOURCE_PRICE sp on sw.SOURCE_PRICE_ID = sp.SOURCE_PRICE_ID
                 join SOURCE s on s.SOURCE_ID = sp.SOURCE_ID
                 join PRODUCT_COMPANY pc on pc.PRODUCT_COMPANY_ID = sp.PRODUCT_COMPANY_ID
        WHERE pc.PRODUCT_COMPANY_ID = #{companyId}
        GROUP BY sp.SOURCE_PRICE_ID
    </select>
    <select id="orderChart" resultType="ProductCompanyChartDto" parameterType="ProductCompanySearchOptionDto">
        SELECT
        s.NAME as sourceName,
        SUM(sw.QUANTITY) as sales
        FROM SOURCE_WAREHOUSE sw
        JOIN SOURCE_PRICE sp on sw.SOURCE_PRICE_ID = sp.SOURCE_PRICE_ID
        join SOURCE s on s.SOURCE_ID = sp.SOURCE_ID
        join PRODUCT_COMPANY pc on pc.PRODUCT_COMPANY_ID = sp.PRODUCT_COMPANY_ID
        WHERE pc.PRODUCT_COMPANY_ID = #{companyId}
        and sw.quantity &lt; 0
        <if test="month != null">
            and sw.PRODUCE_DATE LIKE CONCAT(YEAR(CURDATE()), '-', LPAD(#{month}, 2, '0'), '%')
        </if>
        group by sp.SOURCE_PRICE_ID
    </select>

    <!--    SELECT-->
    <!--    s.NAME as sourceName,-->
    <!--    SUM(CASE-->
    <!--    WHEN sw.QUANTITY &lt; 0 THEN sw.QUANTITY-->
    <!--    ELSE 0-->
    <!--    END) as soldQuantity, &#45;&#45; 판매된 수량 (음수)-->
    <!--    SUM(sw.QUANTITY) as sourceQuantity &#45;&#45; 전체 수량-->
    <!--    FROM SOURCE_WAREHOUSE sw-->
    <!--    JOIN SOURCE_PRICE sp on sw.SOURCE_PRICE_ID = sp.SOURCE_PRICE_ID-->
    <!--    JOIN SOURCE s on s.SOURCE_ID = sp.SOURCE_ID-->
    <!--    JOIN PRODUCT_COMPANY pc on pc.PRODUCT_COMPANY_ID = sp.PRODUCT_COMPANY_ID-->
    <!--    WHERE pc.NAME = #{companyName}-->
    <!--    AND sw.PRODUCE_DATE LIKE CONCAT(YEAR(CURDATE()), '-', LPAD(#{orderChartMonthOption}, 2, '0'), '%')-->
    <!--    GROUP BY sp.SOURCE_PRICE_ID-->
</mapper>