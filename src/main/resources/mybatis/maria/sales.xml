<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.jhta_2402_2_final.exception.dao.sales.SalesDao">

    <!--    그냥 디비 가져오기-->
    <select id="findAll" resultType="KitOrderDto">
        SELECT KIT_ORDER_ID AS KitOrderId,
               KIT_COMPANY_ID AS KitCompanyId,
               MEALKIT_ID AS MealKitId,
               QUANTITY,
               PRODUCT_ORDER_DATE AS ProductOrderDate,
               STATUS_ID AS StatusId
        FROM KIT_ORDER
        order by ProductOrderDate DESC
    </select>

    <!--    조인해서 상세정보까지 가져오기-->
    <select id="findAllDetail" resultType="KitOrderDetailDto">
        SELECT
            o.KIT_ORDER_ID AS kitOrderId,
            c.NAME AS kitCompanyName,
            m.NAME AS mealkitName,
            m.PRICE AS mealkitPrice,
            o.QUANTITY AS quantity,
            (o.QUANTITY * m.PRICE) AS total,
            o.PRODUCT_ORDER_DATE AS orderDate,
            s.STATUS AS status
        FROM
            KIT_ORDER o
                JOIN
            KIT_COMPANY c ON o.KIT_COMPANY_ID = c.KIT_COMPANY_ID
                JOIN
            MEALKIT m ON o.MEALKIT_ID = m.MEALKIT_ID
                JOIN
            STATUS s ON o.STATUS_ID = s.STATUS_ID
        order by orderDate DESC
    </select>

    <!--    새로운 주문 추가-->
    <insert id="insert">
        INSERT INTO KIT_ORDER (KIT_ORDER_ID, KIT_COMPANY_ID, MEALKIT_ID, PRICE, QUANTITY, PRODUCT_ORDER_DATE, STATUS_ID)
        VALUES (#{kitOrderId}, #{kitCompanyId}, #{mealkitId},#{price}, #{quantity}, NOW(), #{statusId})
    </insert>


    <!--    밀키트 업체 이름과 pk값 가져오기-->
    <select id="findAllIdAndName">
        select KIT_COMPANY_ID as kitCompanyId,
               NAME
        from KIT_COMPANY;
    </select>

    <!-- Result Map 정의 -->
    <resultMap id="kitCompanyResultMap" type="map">
        <id property="KIT_COMPANY_ID" column="KIT_COMPANY_ID"/>
        <result property="NAME" column="NAME"/>
    </resultMap>

    <!-- 쿼리 정의 -->
    <select id="getKitCompanyIdAndNames" resultMap="kitCompanyResultMap">
        SELECT KIT_COMPANY_ID, NAME
        FROM KIT_COMPANY
    </select>

    <!-- Result Map 정의 -->
    <resultMap id="mealkitResultMap" type="map">
        <id property="MEALKIT_ID" column="MEALKIT_ID"/>
        <result property="NAME" column="NAME"/>
        <result property="PRICE" column="PRICE"/>
    </resultMap>

    <!-- 쿼리 정의 -->
    <select id="getMealkitIdAndNames" resultMap="mealkitResultMap">
        SELECT MEALKIT_ID, NAME, PRICE
        FROM MEALKIT
    </select>


    <!-- 상태 업데이트 쿼리 -->
    <update id="updateKitOrderStatus" parameterType="map">
        UPDATE KIT_ORDER
        SET STATUS_ID = #{statusId}
        WHERE KIT_ORDER_ID = #{kitOrderId}
    </update>



    <!--밀키트별 필요한 재료 셀렉-->
    <select id="findAllKitSourceDetail" resultType="KitSourceDetailDto">
        SELECT
            ks.KIT_SOURCE_ID AS kitSourceId,
            m.NAME AS mealkitName,
            s.NAME AS sourceName,
            ks.QUANTITY AS quantity
        FROM
            KIT_SOURCE ks
                JOIN
            MEALKIT m ON ks.MEALKIT_ID = m.MEALKIT_ID
                JOIN
            SOURCE s ON ks.SOURCE_ID = s.SOURCE_ID

        ORDER BY mealkitName
    </select>


    <!--    재료명, pk 가져오기-->
    <resultMap id="sourceMap" type="java.util.HashMap">
        <result column="SOURCE_ID" property="sourceId"/>
        <result column="NAME" property="name"/>
    </resultMap>
    <select id="getSourceIdAndNames" resultMap="sourceMap">
        SELECT
            SOURCE_ID,
            NAME
        FROM
            SOURCE
    </select>


    <!--    -->

    <!-- 밀키트를 데이터베이스에 삽입 -->
    <insert id="insertMealkit" >
        INSERT INTO MEALKIT (MEALKIT_ID, NAME, PRICE)
        VALUES (uuid(), #{mealkitName}, 1000)
    </insert>


    <!-- 밀키트 이름으로 밀키트 아이디를 조회 -->
    <select id="getMealkitIdByName" parameterType="String" resultType="String">
        SELECT MEALKIT_ID
        FROM MEALKIT
        WHERE NAME = #{name}
    </select>

    <!-- 밀키트와 재료 매핑 -->
    <insert id="insertKitSources" parameterType="map">
        INSERT INTO KIT_SOURCE (KIT_SOURCE_ID, MEALKIT_ID, SOURCE_ID, QUANTITY)
        VALUES (uuid(), #{mealkitId}, #{sourceId}, #{quantity})
    </insert>

    <!-- KitOrderLog 조회 쿼리 -->
    <select id="selectKitOrderLogs" resultType="KitOrderLogDto">
        SELECT
            kol.KIT_ORDER_LOG_ID AS kitOrderLogId,
            kol.KIT_ORDER_ID AS kitOrderId,
            kc.NAME AS companyName,
            mk.NAME AS mealkitName,
            s.STATUS,
            kol.PRODUCT_ORDER_DATE AS productOrderDate
        FROM
            KIT_ORDER_LOG kol
                JOIN
            KIT_ORDER ko ON kol.KIT_ORDER_ID = ko.KIT_ORDER_ID
                JOIN
            KIT_COMPANY kc ON ko.KIT_COMPANY_ID = kc.KIT_COMPANY_ID
                JOIN
            MEALKIT mk ON ko.MEALKIT_ID = mk.MEALKIT_ID
                JOIN
            STATUS s ON kol.STATUS_ID = s.STATUS_ID
        ORDER BY productOrderDate DESC
    </select>

    <insert id="insertKitOrderLog">
        INSERT INTO KIT_ORDER_LOG (KIT_ORDER_LOG_ID, KIT_ORDER_ID, STATUS_ID, PRODUCT_ORDER_DATE)
        VALUES (
                   uuid(),
                   #{kitOrderId},
                   (SELECT STATUS_ID FROM KIT_ORDER WHERE KIT_ORDER_ID = #{kitOrderId}),
                   NOW()
               )
    </insert>


    <!--    업체별 밀키트 재고 확인-->
    <select id="selectKitStorage" resultType="KitStorageDto">
        SELECT
            KS.KIT_STORAGE_ID as kitStorageId,
            KC.NAME AS companyName,
            MK.NAME AS mealkitName,
            KS.QUANTITY
        FROM
            KIT_STORAGE KS
                JOIN
            KIT_COMPANY KC ON KS.KIT_COMPANY_ID = KC.KIT_COMPANY_ID
                JOIN
            MEALKIT MK ON KS.MEALKIT_ID = MK.MEALKIT_ID

        order by KC.NAME
    </select>

    <!--    주문 처리 완료된 애들만 모아 보기-->
    <select id="findAllCompleted" resultType="KitCompletedDto">
        SELECT
            kol.KIT_ORDER_LOG_ID AS kitOrderLogId,
            kol.KIT_ORDER_ID AS kitOrderId,
            kc.NAME AS companyName,
            mk.NAME AS mealkitName,
            mk.PRICE as mealkitPrice,
            ko.QUANTITY,
            (mk.PRICE * ko.QUANTITY) as total,
            kol.PRODUCT_ORDER_DATE AS productOrderDate
        FROM
            KIT_ORDER_LOG kol
                JOIN
            KIT_ORDER ko ON kol.KIT_ORDER_ID = ko.KIT_ORDER_ID
                JOIN
            KIT_COMPANY kc ON ko.KIT_COMPANY_ID = kc.KIT_COMPANY_ID
                JOIN
            MEALKIT mk ON ko.MEALKIT_ID = mk.MEALKIT_ID
                JOIN
            STATUS s ON kol.STATUS_ID = s.STATUS_ID

        where kol.STATUS_ID = 3
        ORDER BY productOrderDate DESC
    </select>

    <!-- 주문 정보 조회 -->
    <select id="selectKitOrderById" resultType="KitOrderDto">
        SELECT KIT_ORDER_ID as kitOrderId,
               KIT_COMPANY_ID as kitCompanyId,
               MEALKIT_ID as mealkitId,
               QUANTITY,
               STATUS_ID as statusId
        FROM KIT_ORDER
        WHERE KIT_ORDER_ID = #{kitOrderId}
    </select>

    <!-- 창고 정보 조회 -->
    <select id="selectKitStorageById" resultType="KitStorageDto">
        SELECT KIT_STORAGE_ID as kitStorageId,
               KIT_COMPANY_ID as kitCompanyId,
               MEALKIT_ID as mealkitId,
               QUANTITY
        FROM KIT_STORAGE
        WHERE KIT_COMPANY_ID = #{kitCompanyId} AND MEALKIT_ID = #{mealkitId}
    </select>

    <!-- 창고 재고 업데이트 -->
    <update id="updateKitStorage">
        UPDATE KIT_STORAGE
        SET QUANTITY = QUANTITY + #{quantity}
        WHERE KIT_STORAGE_ID = #{kitStorageId}
    </update>

    <!-- 창고에 새로운 재고 추가 -->
    <insert id="insertKitStorage">
        INSERT INTO KIT_STORAGE (KIT_STORAGE_ID, KIT_COMPANY_ID, MEALKIT_ID, QUANTITY)
        VALUES (#{kitStorageId}, #{kitCompanyId}, #{mealkitId}, #{quantity})
    </insert>


    <!--    생산 업체별 재료 가격 셀렉-->
    <select id="selectAllSourcePrice" resultType="SourcePriceDto">
        SELECT
            sp.SOURCE_PRICE_ID as sourcePriceId,
            pc.name AS companyName,
            s.name AS sourceName,
            sp.PRICE
        FROM
            SOURCE_PRICE sp
                JOIN
            PRODUCT_COMPANY pc ON sp.product_company_id = pc.product_company_id
                JOIN
            SOURCE s ON sp.source_id = s.source_id;
    </select>


    <!--    최소 재료값-->
    <select id="selectMinSourcePrice" resultType="SourcePriceDto">
        SELECT
            sp.SOURCE_PRICE_ID as sourcePriceId,
            pc.name AS companyName,
            s.name AS sourceName,
            sp.PRICE as price
        FROM
            SOURCE_PRICE sp
                JOIN
            PRODUCT_COMPANY pc ON sp.product_company_id = pc.product_company_id
                JOIN
            SOURCE s ON sp.source_id = s.source_id
                JOIN
            (
                SELECT
                    source_id,
                    MIN(price) AS min_price
                FROM
                    SOURCE_PRICE
                GROUP BY
                    source_id
            ) sp_min ON sp.source_id = sp_min.source_id AND sp.price = sp_min.min_price
    </select>


    <select id="selectMinKitPrice" resultType="KitPriceDto">
        WITH MealkitDetails AS (
            SELECT
                m.MEALKIT_ID AS mealkitId,
                m.name AS mealkitName,
                s.name AS sourceName,
                MIN(sp.price) AS minPrice,
                ks.QUANTITY AS quantity,
                (MIN(sp.price) * ks.QUANTITY) AS total
            FROM
                MEALKIT m
                    JOIN KIT_SOURCE ks ON m.MEALKIT_ID = ks.MEALKIT_ID
                    JOIN SOURCE s ON ks.SOURCE_ID = s.source_id
                    JOIN SOURCE_PRICE sp ON s.source_id = sp.source_id
            GROUP BY
                m.MEALKIT_ID, m.name, s.name, ks.QUANTITY
        ),
             MealkitTotal AS (
                 SELECT
                     mealkitId,
                     mealkitName,
                     SUM(total) AS minMealkitPrice
                 FROM
                     MealkitDetails
                 GROUP BY
                     mealkitId, mealkitName
             )
        SELECT
            d.mealkitId,
            d.mealkitName,
            d.sourceName,
            d.minPrice,
            d.quantity,
            d.total,
            t.minMealkitPrice,
            m.PRICE AS currentMealkitPrice
        FROM
            MealkitDetails d
                JOIN MealkitTotal t ON d.mealkitId = t.mealkitId
                JOIN MEALKIT m ON d.mealkitId = m.MEALKIT_ID
        ORDER BY
            d.mealkitId, d.sourceName;
    </select>

    <!--밀키트 가격 수정-->
    <update id="updateKitPrice">
        UPDATE MEALKIT
        SET PRICE = #{minPrice}
        WHERE MEALKIT_ID = #{mealkitId}
    </update>

    <!--    발주 요청을 위한 상세정보 가져오기-->
    <select id="selectOrderDetail" resultType="OrderDetailDto">
        SELECT
            KO.KIT_ORDER_ID AS kitOrderId,         -- 주문 ID
            M.NAME AS mealkitName,                -- 밀키트 이름
            S.NAME AS sourceName,                  -- 재료 이름
            (KS.QUANTITY * #{quantity}) AS quantity, -- 필요 수량 (주문 수량에 따라 계산)
            IFNULL(SUM(LWS.QUANTITY), 0) AS stackQuantity,  -- 창고 재고 수량
            sp_min.min_price AS minPrice,          -- 최소 가격
            sp_min.companyName AS companyName      -- 회사명
        FROM
            KIT_ORDER KO
                JOIN MEALKIT M ON KO.MEALKIT_ID = M.MEALKIT_ID  -- KIT_ORDER와 MEALKIT 조인
                JOIN KIT_SOURCE KS ON M.MEALKIT_ID = KS.MEALKIT_ID  -- MEALKIT과 KIT_SOURCE 조인
                JOIN SOURCE S ON KS.SOURCE_ID = S.SOURCE_ID  -- KIT_SOURCE와 SOURCE 조인
                LEFT JOIN LOGISTICS_WAREHOUSE_STACK LWS ON KS.SOURCE_ID = LWS.SOURCE_ID  -- 창고 정보 조인
                JOIN (
                SELECT
                    sp.SOURCE_ID,
                    sp.PRICE AS min_price,
                    pc.NAME AS companyName,
                    ROW_NUMBER() OVER (PARTITION BY sp.SOURCE_ID ORDER BY sp.PRICE) AS rn  -- 동일 SOURCE_ID 내에서 가격 순서대로 번호 부여
                FROM
                    SOURCE_PRICE sp
                        JOIN PRODUCT_COMPANY pc ON sp.PRODUCT_COMPANY_ID = pc.PRODUCT_COMPANY_ID
            ) sp_min ON S.SOURCE_ID = sp_min.SOURCE_ID  -- 재료의 최소 가격과 회사 정보 조인
        WHERE
            sp_min.rn = 1 AND -- 각 재료별 첫 번째(최소 가격) 행만 선택
            KO.KIT_ORDER_ID = #{kitOrderId}  -- kitOrderId를 조건으로 사용
        GROUP BY
            KO.KIT_ORDER_ID, M.NAME, S.NAME, KS.QUANTITY, sp_min.min_price, sp_min.companyName
    </select>



    <!-- SOURCE_PRICE_ID 조회 -->
    <select id="findSourcePriceId" resultType="UUID">
        SELECT sp.SOURCE_PRICE_ID
        FROM SOURCE_PRICE sp
                 JOIN SOURCE s ON sp.SOURCE_ID = s.SOURCE_ID
                 JOIN PRODUCT_COMPANY pc ON sp.PRODUCT_COMPANY_ID = pc.PRODUCT_COMPANY_ID
        WHERE s.NAME = #{sourceName}
          AND pc.NAME = #{companyName}
    </select>

    <!-- PRODUCT_ORDER 데이터 삽입 -->
    <insert id="insertProductOrder">
        INSERT INTO PRODUCT_ORDER (
            PRODUCT_ORDER_ID,
            PRODUCT_COMPANY_ID,
            SOURCE_ID,
            QUANTITY,
            PRICE,
            PRODUCT_ORDER_DATE,
            STATUS_ID,
            KIT_ORDER_ID
        )
        VALUES (
                   #{productOrderId},
                   (SELECT PRODUCT_COMPANY_ID FROM PRODUCT_COMPANY WHERE NAME = #{companyName}),  -- 회사 이름으로 회사 ID 찾기
                   (SELECT SOURCE_ID FROM SOURCE WHERE NAME = #{sourceName}),  -- 재료 이름으로 재료 ID 찾기
                   #{itemQuantity},
                   #{minPrice},
                   NOW(),
                   1,
                   #{kitOrderId}
               );

    </insert>


    <!--    product_order 테이블 조회-->
    <select id="selectProductOrder" resultType="ProductOrderDetailDto">
        SELECT
            po.PRODUCT_ORDER_ID as productOrderId,
            pc.NAME AS companyName,
            s.NAME AS sourceName,
            po.PRICE AS sourcePrice,
            po.QUANTITY,
            po.PRODUCT_ORDER_DATE as orderDate,
            st.STATUS
        FROM
            PRODUCT_ORDER po
                JOIN SOURCE s ON po.SOURCE_ID = s.SOURCE_ID
                JOIN PRODUCT_COMPANY pc ON po.PRODUCT_COMPANY_ID = pc.PRODUCT_COMPANY_ID
                JOIN STATUS st ON po.STATUS_ID = st.STATUS_ID
        ORDER BY
            orderDate DESC;
    </select>

    <!--    product_order_log 인서트-->
    <insert id="insertProductOrderLog">
        INSERT INTO PRODUCT_ORDER_LOG (
            PRODUCT_ORDER_LOG_ID,
            PRODUCT_ORDER_ID,
            STATUS_ID,
            PRODUCT_ORDER_DATE
        )
        VALUES (
                   UUID(),
                   #{productOrderId},
                   (SELECT STATUS_ID
                    FROM PRODUCT_ORDER
                    WHERE PRODUCT_ORDER_ID = #{productOrderId}),
                   NOW()
               );
    </insert>

    <select id="selectProductOrderLog" resultType="ProductOrderLogDetailDto">
        SELECT
            POL.PRODUCT_ORDER_LOG_ID AS productOrderLogId,
            PO.PRODUCT_ORDER_ID AS productOrderId,
            S.NAME AS sourceName,
            PC.NAME AS companyName,
            PO.QUANTITY,
            PO.PRICE,
            POL.PRODUCT_ORDER_DATE AS orderDate,
            ST.STATUS AS status
        FROM
            PRODUCT_ORDER_LOG POL
                JOIN PRODUCT_ORDER PO ON POL.PRODUCT_ORDER_ID = PO.PRODUCT_ORDER_ID
                JOIN SOURCE S ON PO.SOURCE_ID = S.SOURCE_ID
                JOIN PRODUCT_COMPANY PC ON PO.PRODUCT_COMPANY_ID = PC.PRODUCT_COMPANY_ID
                JOIN STATUS ST ON POL.STATUS_ID = ST.STATUS_ID
        ORDER BY
            orderDate DESC;
    </select>

    <!--    취소-->
    <update id="updateKitOrderCancel">
        UPDATE KIT_ORDER
        SET STATUS_ID = 4
        WHERE KIT_ORDER_ID = #{kitOrderId};
    </update>

    <update id="updateProductOrderCancel">
        UPDATE PRODUCT_ORDER
        SET STATUS_ID = 4
        WHERE KIT_ORDER_ID = #{kitOrderId};
    </update>

    <select id="selectProductOrderIdByKitOrderId" resultType="UUID">
        SELECT PRODUCT_ORDER_ID
        FROM PRODUCT_ORDER
        WHERE KIT_ORDER_ID = #{kitOrderId}
    </select>


    <select id="selectKitStorageTotalQuantity" resultMap="mealkitQuantityMap">
        SELECT
            MK.NAME AS mealkitName,
            SUM(KS.QUANTITY) AS totalQuantity
        FROM
            KIT_STORAGE KS
                JOIN MEALKIT MK ON KS.MEALKIT_ID = MK.MEALKIT_ID
        GROUP BY
            MK.NAME
        ORDER BY
            totalQuantity DESC;
    </select>

    <resultMap id="mealkitQuantityMap" type="map">
        <result property="mealkitName" column="mealkitName"/>
        <result property="totalQuantity" column="totalQuantity"/>
    </resultMap>


    <!--    처리완료된(판매된) 밀키트 수량 알아내기 -->
    <select id="selectKitTotalQuantity" resultMap="completedKitQuantityMap">
        SELECT
            mk.NAME AS mealkitName,
            SUM(ko.QUANTITY) AS totalQuantity,
            SUM(mk.PRICE * ko.QUANTITY) AS totalPrice
        FROM
            KIT_ORDER_LOG kol
                JOIN KIT_ORDER ko ON kol.KIT_ORDER_ID = ko.KIT_ORDER_ID
                JOIN MEALKIT mk ON ko.MEALKIT_ID = mk.MEALKIT_ID
        WHERE
            kol.STATUS_ID = 3
        GROUP BY
            mk.NAME
        ORDER BY
            totalQuantity DESC;
    </select>

    <resultMap id="completedKitQuantityMap" type="map">
        <result property="mealkitName" column="mealkitName"/>
        <result property="totalQuantity" column="totalQuantity"/>
        <result property="totalPrice" column="totalPrice"/>
    </resultMap>


    <!--    업체별 누적 판매액-->
    <select id="selectTotalQuantityByCompanyName" resultMap="totalQuantityMapByCompanyName">
        SELECT
            kc.NAME AS companyName,
            SUM(ko.QUANTITY) AS totalQuantity,
            SUM(mk.PRICE * ko.QUANTITY) AS totalPrice
        FROM
            KIT_ORDER_LOG kol
                JOIN KIT_ORDER ko ON kol.KIT_ORDER_ID = ko.KIT_ORDER_ID
                JOIN KIT_COMPANY kc ON ko.KIT_COMPANY_ID = kc.KIT_COMPANY_ID
                JOIN MEALKIT mk ON ko.MEALKIT_ID = mk.MEALKIT_ID
        WHERE
            kol.STATUS_ID = 3
        GROUP BY
            kc.NAME
        ORDER BY
            companyName;
    </select>

    <resultMap id="totalQuantityMapByCompanyName" type="map">
        <result property="mealkitName" column="mealkitName"/>
        <result property="totalQuantity" column="totalQuantity"/>
        <result property="totalPrice" column="totalPrice"/>
    </resultMap>

    <!-- 업체 등록 -->
    <insert id="insertKitCompany">
        INSERT INTO KIT_COMPANY (KIT_COMPANY_ID, NAME, ADDRESS)
        VALUES (#{kitCompanyId}, #{companyName}, #{address});
    </insert>
    <!--유저등록-->
    <insert id="insertUser">
        INSERT INTO USER (USER_PK, USER_NAME, USER_ID, USER_PASSWORD, USER_EMAIL, USER_TEL, ROLE_NAME)
        VALUES (#{userPk}, #{userName}, #{userId}, #{password}, #{email}, #{tel}, #{role})
    </insert>

    <insert id="insertKitCompanyMember">
        INSERT INTO KIT_COMPANY_MEMBER (KIT_COMPANY_MEMBER_ID, USER_PK, KIT_COMPANY_ID)
        VALUES (UUID(), #{userPk}, #{kitCompanyId});
    </insert>

    <select id="getMonthlySales" resultType="MonthlySalesDto">
        WITH months AS (
            -- 1월부터 12월까지 월 목록 생성
            SELECT 1 AS month
        UNION ALL SELECT 2
                  UNION ALL SELECT 3
                  UNION ALL SELECT 4
                  UNION ALL SELECT 5
                  UNION ALL SELECT 6
                  UNION ALL SELECT 7
                  UNION ALL SELECT 8
                  UNION ALL SELECT 9
                  UNION ALL SELECT 10
                  UNION ALL SELECT 11
                  UNION ALL SELECT 12
                      ),
company_sales AS (
    -- 업체별로 월별 매출액 계산
    SELECT
        kc.NAME AS companyName,
        MONTH(kol.PRODUCT_ORDER_DATE) AS orderMonth,
        SUM(mk.PRICE * ko.QUANTITY) AS monthlySales
    FROM
        KIT_ORDER_LOG kol
        JOIN KIT_ORDER ko ON kol.KIT_ORDER_ID = ko.KIT_ORDER_ID
        JOIN KIT_COMPANY kc ON ko.KIT_COMPANY_ID = kc.KIT_COMPANY_ID
        JOIN MEALKIT mk ON ko.MEALKIT_ID = mk.MEALKIT_ID
    WHERE
        kol.STATUS_ID = 3 -- 상태가 3인 주문만 선택
    GROUP BY
        kc.NAME, MONTH(kol.PRODUCT_ORDER_DATE)
)
        SELECT
            c.companyName,
            m.month AS orderMonth,
            IFNULL(cs.monthlySales, 0) AS totalSales
        FROM
                (SELECT DISTINCT NAME AS companyName FROM KIT_COMPANY) c -- 업체 목록
                    CROSS JOIN months m -- 월 목록과 조인
                    LEFT JOIN company_sales cs ON c.companyName = cs.companyName AND m.month = cs.orderMonth
        ORDER BY
            c.companyName, m.month;
    </select>

    <!--동시성 처리용-->
    <select id="getKitOrderStatus" resultType="String">
        select STATUS
        from KIT_ORDER ko join STATUS s on ko.STATUS_ID = s.STATUS_ID
        where KIT_ORDER_ID = #{kitOrderId}
    </select>

<!--    현재 밀키트 가격과 밀키트의 최소가격 비교-->
    <select id="getCurrentPriceAndMinPrice" resultType="KitPriceDto">
        WITH MealkitDetails AS (
            SELECT
                m.MEALKIT_ID AS mealkitId,
                m.name AS mealkitName,
                s.name AS sourceName,
                MIN(sp.price) AS minPrice,
                ks.QUANTITY AS quantity,
                (MIN(sp.price) * ks.QUANTITY) AS total
            FROM
                MEALKIT m
                    JOIN KIT_SOURCE ks ON m.MEALKIT_ID = ks.MEALKIT_ID
                    JOIN SOURCE s ON ks.SOURCE_ID = s.source_id
                    JOIN SOURCE_PRICE sp ON s.source_id = sp.source_id
            GROUP BY
                m.MEALKIT_ID, m.name, s.name, ks.QUANTITY
        ),
             MealkitTotal AS (
                 SELECT
                     mealkitId,
                     mealkitName,
                     SUM(total) AS minMealkitPrice
                 FROM
                     MealkitDetails
                 GROUP BY
                     mealkitId, mealkitName
             )
        SELECT
            d.mealkitId,
            d.mealkitName,
            t.minMealkitPrice,
            m.PRICE AS currentMealkitPrice
        FROM
            MealkitDetails d
                JOIN MealkitTotal t ON d.mealkitId = t.mealkitId
                JOIN MEALKIT m ON d.mealkitId = m.MEALKIT_ID
        where MEALKIT_ID = #{mealkitId}
        group by MEALKIT_ID;
    </select>

    <select id="checkUserIdExists" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM USER
        WHERE USER_ID = #{userId}
    </select>

    <select id="checkCompanyNameExists" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM KIT_COMPANY
        WHERE NAME = #{companyName}
    </select>


    <select id="checkEmailExists" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM USER
        WHERE USER_EMAIL = #{email}
    </select>

    <select id="checkTelExists" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM USER
        WHERE USER_TEL = #{tel}
    </select>

    <select id="checkAddressExists" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM KIT_COMPANY
        WHERE ADDRESS = #{address}
    </select>

<!--    월매출가져오기-->
    <select id="getTotalMonthSale" resultType="int">
        SELECT
            COALESCE(SUM(o.QUANTITY * m.PRICE), 0) AS totalSum
        FROM
            KIT_ORDER o
                JOIN
            KIT_COMPANY c ON o.KIT_COMPANY_ID = c.KIT_COMPANY_ID
                JOIN
            MEALKIT m ON o.MEALKIT_ID = m.MEALKIT_ID
                JOIN
            STATUS s ON o.STATUS_ID = s.STATUS_ID
        WHERE
            o.STATUS_ID = 3 AND
            YEAR(o.PRODUCT_ORDER_DATE) = #{year} AND
            MONTH(o.PRODUCT_ORDER_DATE) = #{month};

    </select>

    <!--    연매출가져오기-->
    <select id="getTotalYearSale" resultType="int">
        SELECT
            COALESCE(SUM(o.QUANTITY * m.PRICE), 0) AS totalSum
        FROM
            KIT_ORDER o
                JOIN
            KIT_COMPANY c ON o.KIT_COMPANY_ID = c.KIT_COMPANY_ID
                JOIN
            MEALKIT m ON o.MEALKIT_ID = m.MEALKIT_ID
                JOIN
            STATUS s ON o.STATUS_ID = s.STATUS_ID
        WHERE
            o.STATUS_ID = 3 AND
            YEAR(o.PRODUCT_ORDER_DATE) = #{year}

    </select>


    <select id="getProcessingCount" resultType="int">
        SELECT
            count(*)
        FROM
            KIT_ORDER o
                JOIN
            KIT_COMPANY c ON o.KIT_COMPANY_ID = c.KIT_COMPANY_ID
                JOIN
            MEALKIT m ON o.MEALKIT_ID = m.MEALKIT_ID
                JOIN
            STATUS s ON o.STATUS_ID = s.STATUS_ID
        WHERE
            o.STATUS_ID NOT IN (3, 4)
    </select>

    <select id="getCompleteCount" resultType="int">
        SELECT
            count(*)
        FROM
            KIT_ORDER o
                JOIN
            KIT_COMPANY c ON o.KIT_COMPANY_ID = c.KIT_COMPANY_ID
                JOIN
            MEALKIT m ON o.MEALKIT_ID = m.MEALKIT_ID
                JOIN
            STATUS s ON o.STATUS_ID = s.STATUS_ID
        WHERE
            o.STATUS_ID = 3
    </select>


</mapper>